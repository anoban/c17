#pragma once
#ifndef __UTILS__
    #define __UTILS__ 1
    #include <master.h>

// A header for miscellaneous utility procedures.
// Implemented as inlined functions, it the header itself.

// Converts a 32 bit BE byte order value to its equivalent LE byte order value.
uint32_t __forceinline __stdcall BE2LE_U32(_In_ const uint32_t be_value) {
    // Implementing this in a header, since it's needed everywhere and needs to be inlineable for performance.

    // We basically need to reverse the byte order.
    // BE: MSB is the leftmost byte and LSB is the rightmost byte.
    // LE: MSB is the rightmost byte and LSB is the leftmost byte.

    // To get equivalent values, the bit patterns need to be as follows,
    // BE: 1011 0111 0101 1111 1011 1000 0100 0010
    // LE: 0010 0100 1000 1011 1111 0101 0111 1011

    uint32_t le_value  = (be_value << 24U);                // pick the last byte of the BE value and make it our first.
    le_value          |= ((be_value << 8U) & 0x00FF0000U); // pick the 3rd byte of the BE value and make it our second.
    le_value          |= ((be_value >> 8U) & 0x0000FF00U); // pick the 2nd byte of the BE value and make it our third.
    le_value          |= (be_value >> 24);                 // pick the first byte of the BE value and make it our last.
    return le_value;
}

// a uint64_t variant of the above function,
uint64_t __forceinline __stdcall BE2LE_U64(_In_ const uint64_t be_value) {
    // e.g. BE: 1111 0000 1010 1001 1010 1000 0101 0101 1111 1011 1101 1111 0001 1001 0111 0011
    //			----1---- ----2---- ----3---- ----4---- ----5---- ----6---- ----7---- ----8----

    uint64_t le_value  = (be_value << 56U);                           // make the last BE byte first.
    le_value          |= ((be_value << 40U) & 0x00FF000000000000LLU); // make the 7th BE byte second.
    le_value          |= ((be_value << 24U) & 0x0000FF0000000000LLU); // make the 6th BE byte third.
    le_value          |= ((be_value << 8U) & 0x000000FF00000000LLU);  // make the 5th BE byte fourth.
    le_value          |= ((be_value >> 8U) & 0x00000000FF000000LLU);  // make the 4th BE byte fifth.
    le_value          |= ((be_value >> 24U) & 0x0000000000FF0000LLU); // make the 3rd BE byte sixth.
    le_value          |= ((be_value >> 40U) & 0x000000000000FF00LLU); // make the 2nd BE byte seventh.
    le_value          |= (be_value >> 56U);                           // make the first byte last.
    return le_value;
}

// tests both the 32 bit and 64 bit versions of BE2LE.
bool __forceinline __stdcall test_BE2LE(void) {
    // In hex world, eight bits are represented by two hex digits.
    // An 8 bit pattern 1110 0011 is 0xD3, 1111 1011 is 0xFB.
    // It's very convenient to use hex notation when doing bit shifts by multiples of 8,
    // since you basically have to just reverse the hex bytes, which is way more convenient than
    // using decimals.

    // test the 32 bit procedures with 100 32 bit values.
    bool test_result_u32 =
        BE2LE_U32(0xAD6C4D1C) == 0x1C4D6CAD && BE2LE_U32(0x37769863) == 0x63987637 && BE2LE_U32(0xD6788DC6) == 0xC68D78D6 &&
        BE2LE_U32(0x7F5FF18D) == 0x8DF15F7F && BE2LE_U32(0xCE3FDCEA) == 0xEADC3FCE && BE2LE_U32(0x8724F832) == 0x32F82487 &&
        BE2LE_U32(0x97C19169) == 0x6991C197 && BE2LE_U32(0x95FD8979) == 0x7989FD95 && BE2LE_U32(0x4CF324F8) == 0xF824F34C &&
        BE2LE_U32(0xC9527D28) == 0x287D52C9 && BE2LE_U32(0xC2295F46) == 0x465F29C2 && BE2LE_U32(0x7C934EEC) == 0xEC4E937C &&
        BE2LE_U32(0x7EBCEF32) == 0x32EFBC7E && BE2LE_U32(0xF3DEE1F2) == 0xF2E1DEF3 && BE2LE_U32(0x9FABD229) == 0x29D2AB9F &&
        BE2LE_U32(0x9B5CC67A) == 0x7AC65C9B && BE2LE_U32(0x8D92FDB4) == 0xB4FD928D && BE2LE_U32(0xA4B71CF8) == 0xF81CB7A4 &&
        BE2LE_U32(0xC974FBBE) == 0xBEFB74C9 && BE2LE_U32(0x145CB7DE) == 0xDEB75C14 && BE2LE_U32(0xA7577A78) == 0x787A57A7 &&
        BE2LE_U32(0xB1A2D464) == 0x64D4A2B1 && BE2LE_U32(0x1CACC4D8) == 0xD8C4AC1C && BE2LE_U32(0x5EBE53D1) == 0xD153BE5E &&
        BE2LE_U32(0xFBB9ACC2) == 0xC2ACB9FB && BE2LE_U32(0x1216CB96) == 0x96CB1612 && BE2LE_U32(0xD4737A82) == 0x827A73D4 &&
        BE2LE_U32(0x1EED6A61) == 0x616AED1E && BE2LE_U32(0x5FAC2BAF) == 0xAF2BAC5F && BE2LE_U32(0xAC7F87E3) == 0xE3877FAC &&
        BE2LE_U32(0x522D414D) == 0x4D412D52 && BE2LE_U32(0x76187B92) == 0x927B1876 && BE2LE_U32(0x83E28C35) == 0x358CE283 &&
        BE2LE_U32(0x43A9C2A3) == 0xA3C2A943 && BE2LE_U32(0xC9B2FD24) == 0x24FDB2C9 && BE2LE_U32(0x6F3A713C) == 0x3C713A6F &&
        BE2LE_U32(0x423A5B17) == 0x175B3A42 && BE2LE_U32(0xEBAC182B) == 0x2B18ACEB && BE2LE_U32(0xFD39ABFE) == 0xFEAB39FD &&
        BE2LE_U32(0xCD3A57D8) == 0xD8573ACD && BE2LE_U32(0xA32BE778) == 0x78E72BA3 && BE2LE_U32(0x24C1675F) == 0x5F67C124 &&
        BE2LE_U32(0x5B61832A) == 0x2A83615B && BE2LE_U32(0xDB81232A) == 0x2A2381DB && BE2LE_U32(0x27FDFB68) == 0x68FBFD27 &&
        BE2LE_U32(0x7BFE9334) == 0x3493FE7B && BE2LE_U32(0xD93ED16A) == 0x6AD13ED9 && BE2LE_U32(0xFB19E7FB) == 0xFBE719FB &&
        BE2LE_U32(0x8952A392) == 0x92A35289 && BE2LE_U32(0x5FE2C485) == 0x85C4E25F && BE2LE_U32(0x1BF56BB8) == 0xB86BF51B &&
        BE2LE_U32(0xEB7FBC49) == 0x49BC7FEB && BE2LE_U32(0xF296D33D) == 0x3DD396F2 && BE2LE_U32(0x98F47DA6) == 0xA67DF498 &&
        BE2LE_U32(0xA9F2D95A) == 0x5AD9F2A9 && BE2LE_U32(0x937C3A25) == 0x253A7C93 && BE2LE_U32(0xABD69ABE) == 0xBE9AD6AB &&
        BE2LE_U32(0x89C6C57C) == 0x7CC5C689 && BE2LE_U32(0x3EB1F642) == 0x42F6B13E && BE2LE_U32(0xD4E67CF6) == 0xF67CE6D4 &&
        BE2LE_U32(0xE17C3D59) == 0x593D7CE1 && BE2LE_U32(0x6ECF1BA6) == 0xA61BCF6E && BE2LE_U32(0x95C51F7D) == 0x7D1FC595 &&
        BE2LE_U32(0x627312CE) == 0xCE127362 && BE2LE_U32(0x632E7CD3) == 0xD37C2E63 && BE2LE_U32(0x9C7C4AFA) == 0xFA4A7C9C &&
        BE2LE_U32(0xCFECA725) == 0x25A7ECCF && BE2LE_U32(0xC6FC72AC) == 0xAC72FCC6 && BE2LE_U32(0x354DC51A) == 0x1AC54D35 &&
        BE2LE_U32(0x1EF44318) == 0x1843F41E && BE2LE_U32(0x274CF3CA) == 0xCAF34C27 && BE2LE_U32(0xC182A1C9) == 0xC9A182C1 &&
        BE2LE_U32(0x2C3E751F) == 0x1F753E2C && BE2LE_U32(0x896D345A) == 0x5A346D89 && BE2LE_U32(0x3DDA9B56) == 0x569BDA3D &&
        BE2LE_U32(0xA1B91E3B) == 0x3B1EB9A1 && BE2LE_U32(0xC5C8FC83) == 0x83FCC8C5 && BE2LE_U32(0xD2372D2A) == 0x2A2D37D2 &&
        BE2LE_U32(0x3BB89ED4) == 0xD49EB83B && BE2LE_U32(0x61C36E25) == 0x256EC361 && BE2LE_U32(0x6148B793) == 0x93B74861 &&
        BE2LE_U32(0xE89A52BE) == 0xBE529AE8 && BE2LE_U32(0x69382EDA) == 0xDA2E3869 && BE2LE_U32(0x6C657293) == 0x9372656C &&
        BE2LE_U32(0xB197591B) == 0x1B5997B1 && BE2LE_U32(0x6E2AF9A5) == 0xA5F92A6E && BE2LE_U32(0x98EC87EC) == 0xEC87EC98 &&
        BE2LE_U32(0xB9EA95A8) == 0xA895EAB9 && BE2LE_U32(0x53367AC8) == 0xC87A3653 && BE2LE_U32(0x72753CC7) == 0xC73C7572 &&
        BE2LE_U32(0xC412452A) == 0x2A4512C4 && BE2LE_U32(0xB829F4DF) == 0xDFF429B8 && BE2LE_U32(0x84FC5176) == 0x7651FC84 &&
        BE2LE_U32(0xE953584B) == 0x4B5853E9 && BE2LE_U32(0x3D28248A) == 0x8A24283D && BE2LE_U32(0xFD67B5EC) == 0xECB567FD &&
        BE2LE_U32(0xDF1A8BE6) == 0xE68B1ADF && BE2LE_U32(0x2CD912A5) == 0xA512D92C && BE2LE_U32(0x652E9165) == 0x65912E65 &&
        BE2LE_U32(0x39CD7418) == 0x1874CD39;

    // test the 64 bit procedures with 100 32 bit values.
    bool test_result_u64 = BE2LE_U64(0x1AFE9FB8B19E4E2B) == 0x2B4E9EB1B89FFE1A && BE2LE_U64(0xF28BFBE86AB5487F) == 0x7F48B56AE8FB8BF2 &&
                           BE2LE_U64(0x13938F5F136CDEBF) == 0xBFDE6C135F8F9313 && BE2LE_U64(0x175B51933ECAFE93) == 0x93FECA3E93515B17 &&
                           BE2LE_U64(0xBCEA8949C83EEF6A) == 0x6AEF3EC84989EABC && BE2LE_U64(0xF1A55313FCE4AF85) == 0x85AFE4FC1353A5F1 &&
                           BE2LE_U64(0x5DD4CBE134FAABBE) == 0xBEABFA34E1CBD45D && BE2LE_U64(0xA89D8BA4BA45AF48) == 0x48AF45BAA48B9DA8 &&
                           BE2LE_U64(0x7219C4374ACD6A7A) == 0x7A6ACD4A37C41972 && BE2LE_U64(0x29AB69F663316BB8) == 0xB86B3163F669AB29 &&
                           BE2LE_U64(0x51C76A1DE6B1E3AF) == 0xAFE3B1E61D6AC751 && BE2LE_U64(0x641272DF46E8732A) == 0x2A73E846DF721264 &&
                           BE2LE_U64(0x925DDA176495DAC3) == 0xC3DA956417DA5D92 && BE2LE_U64(0x6BE3B79E43EF2E2D) == 0x2D2EEF439EB7E36B &&
                           BE2LE_U64(0x5998F72436B1BD58) == 0x58BDB13624F79859 && BE2LE_U64(0xBE7F57497119A496) == 0x96A4197149577FBE &&
                           BE2LE_U64(0xBA96822C68E44B3C) == 0x3C4BE4682C8296BA && BE2LE_U64(0x4F8BC9E44D72D718) == 0x18D7724DE4C98B4F &&
                           BE2LE_U64(0x49FB24A54BB3AF49) == 0x49AFB34BA524FB49 && BE2LE_U64(0xE59F6A497874F3FD) == 0xFDF37478496A9FE5 &&
                           BE2LE_U64(0x87234FD8FEDEDF2B) == 0x2BDFDEFED84F2387 && BE2LE_U64(0xD9788BECFED82C8F) == 0x8F2CD8FEEC8B78D9 &&
                           BE2LE_U64(0x18A7987B7EF67FC5) == 0xC57FF67E7B98A718 && BE2LE_U64(0xE2B231657EB7976B) == 0x6B97B77E6531B2E2 &&
                           BE2LE_U64(0xFC31E6D7B47E8441) == 0x41847EB4D7E631FC && BE2LE_U64(0x9B8B5D46CB6A1358) == 0x58136ACB465D8B9B &&
                           BE2LE_U64(0x3B8416375B7A699F) == 0x9F697A5B3716843B && BE2LE_U64(0x713A958274ADFA7A) == 0x7AFAAD7482953A71 &&
                           BE2LE_U64(0xF1455C461FA77F15) == 0x157FA71F465C45F1 && BE2LE_U64(0xA2A2FDD87EA93BDF) == 0xDF3BA97ED8FDA2A2 &&
                           BE2LE_U64(0xDF9238F76FD1CDBE) == 0xBECDD16FF73892DF && BE2LE_U64(0xB2691BC3487B25A8) == 0xA8257B48C31B69B2 &&
                           BE2LE_U64(0x7CBD7191FE9B2CC4) == 0xC42C9BFE9171BD7C && BE2LE_U64(0x925A57DE8FBA136A) == 0x6A13BA8FDE575A92 &&
                           BE2LE_U64(0xADCD6926811F36A6) == 0xA6361F812669CDAD && BE2LE_U64(0xFC6AEFA45A82EDE7) == 0xE7ED825AA4EF6AFC &&
                           BE2LE_U64(0x9E9A1FE187436D64) == 0x646D4387E11F9A9E && BE2LE_U64(0x45E1F9763581DE71) == 0x71DE813576F9E145 &&
                           BE2LE_U64(0xB4935B647AB57347) == 0x4773B57A645B93B4 && BE2LE_U64(0x8C78C4562FAF7276) == 0x7672AF2F56C4788C &&
                           BE2LE_U64(0xB11CD2C2C9D14995) == 0x9549D1C9C2D21CB1 && BE2LE_U64(0x74438DBA717B188A) == 0x8A187B71BA8D4374 &&
                           BE2LE_U64(0xAB937AC75FFBA76C) == 0x6CA7FB5FC77A93AB && BE2LE_U64(0xC235FC4C8EB386A9) == 0xA986B38E4CFC35C2 &&
                           BE2LE_U64(0x71EAF79C31198AD6) == 0xD68A19319CF7EA71 && BE2LE_U64(0xD1794686AB67D3A7) == 0xA7D367AB864679D1 &&
                           BE2LE_U64(0x743D61EF1AD88A58) == 0x588AD81AEF613D74 && BE2LE_U64(0xA1711BFA5C923AC5) == 0xC53A925CFA1B71A1 &&
                           BE2LE_U64(0x6C41BD13316472BA) == 0xBA72643113BD416C && BE2LE_U64(0xF1B88E2331F41814) == 0x1418F431238EB8F1 &&
                           BE2LE_U64(0xA729F3CB1DD4ECBA) == 0xBAECD41DCBF329A7 && BE2LE_U64(0x9A715F62D6B32871) == 0x7128B3D6625F719A &&
                           BE2LE_U64(0x311CD2BDD5F4C983) == 0x83C9F4D5BDD21C31 && BE2LE_U64(0x96C55468989668E1) == 0xE16896986854C596 &&
                           BE2LE_U64(0x6189B9E63E53BE46) == 0x46BE533EE6B98961 && BE2LE_U64(0xA145F7A11FF545C1) == 0xC145F51FA1F745A1 &&
                           BE2LE_U64(0x8619AFE315E1E614) == 0x14E6E115E3AF1986 && BE2LE_U64(0x98EB4FB35CD97BBD) == 0xBD7BD95CB34FEB98 &&
                           BE2LE_U64(0xF99AE47A3DCEB686) == 0x86B6CE3D7AE49AF9 && BE2LE_U64(0x3BC7F91E78E518E5) == 0xE518E5781EF9C73B &&
                           BE2LE_U64(0x7A6CE9288263F553) == 0x53F5638228E96C7A && BE2LE_U64(0xF31F7A2EEC852315) == 0x152385EC2E7A1FF3 &&
                           BE2LE_U64(0x19FAB757361A1D87) == 0x871D1A3657B7FA19 && BE2LE_U64(0x144BF4CB81E7469C) == 0x9C46E781CBF44B14 &&
                           BE2LE_U64(0x15ADABE8841C78C6) == 0xC6781C84E8ABAD15 && BE2LE_U64(0x847BE21349EDE62C) == 0x2CE6ED4913E27B84 &&
                           BE2LE_U64(0xA4B7C75C82D36BF4) == 0xF46BD3825CC7B7A4 && BE2LE_U64(0x9F3782F4258B8DC7) == 0xC78D8B25F482379F &&
                           BE2LE_U64(0x17FA922AC9EC5961) == 0x6159ECC92A92FA17 && BE2LE_U64(0x159A965AC9D82874) == 0x7428D8C95A969A15 &&
                           BE2LE_U64(0xE3178F757E47577E) == 0x7E57477E758F17E3 && BE2LE_U64(0x3B4FF78174891741) == 0x4117897481F74F3B &&
                           BE2LE_U64(0x6BAD215857F1966D) == 0x6D96F1575821AD6B && BE2LE_U64(0x942EC4658C8162BE) == 0xBE62818C65C42E94 &&
                           BE2LE_U64(0x917FED8DAE8386E4) == 0xE48683AE8DED7F91 && BE2LE_U64(0xD93EBA79656AB3E7) == 0xE7B36A6579BA3ED9 &&
                           BE2LE_U64(0x4797AD5B6DB13C74) == 0x743CB16D5BAD9747 && BE2LE_U64(0xDF128D26BF5DD95F) == 0x5FD95DBF268D12DF &&
                           BE2LE_U64(0xD447967D24F14FE3) == 0xE34FF1247D9647D4 && BE2LE_U64(0x8A23DA824EA49164) == 0x6491A44E82DA238A &&
                           BE2LE_U64(0xDA211EBCCEB2F857) == 0x57F8B2CEBC1E21DA && BE2LE_U64(0xFBE1E82D1CD4F4B5) == 0xB5F4D41C2DE8E1FB &&
                           BE2LE_U64(0x3E833EACA45EC6EF) == 0xEFC65EA4AC3E833E && BE2LE_U64(0x798AC9312DD81E92) == 0x921ED82D31C98A79 &&
                           BE2LE_U64(0x98AF51B549E429E9) == 0xE929E449B551AF98 && BE2LE_U64(0x74A95AD3BA3BD1BE) == 0xBED13BBAD35AA974 &&
                           BE2LE_U64(0xAFF6E8BACF31B921) == 0x21B931CFBAE8F6AF && BE2LE_U64(0x5AD6FB97CAA31D9E) == 0x9E1DA3CA97FBD65A &&
                           BE2LE_U64(0x12A4BA4DACB14ADC) == 0xDC4AB1AC4DBAA412 && BE2LE_U64(0x175778A83AF1DC41) == 0x41DCF13AA8785717 &&
                           BE2LE_U64(0xC28AEC3CE64FD684) == 0x84D64FE63CEC8AC2 && BE2LE_U64(0xEC4C8AF58DA93136) == 0x3631A98DF58A4CEC &&
                           BE2LE_U64(0x787EC6D637282698) == 0x98262837D6C67E78 && BE2LE_U64(0x53FC3262518768C9) == 0xC96887516232FC53 &&
                           BE2LE_U64(0x794A645A581C7BCA) == 0xCA7B1C585A644A79 && BE2LE_U64(0xBC3625DA26469DDE) == 0xDE9D4626DA2536BC &&
                           BE2LE_U64(0x8D42B2B51654E7D3) == 0xD3E75416B5B2428D && BE2LE_U64(0xA7D63AFA8335265D) == 0x5D263583FA3AD6A7 &&
                           BE2LE_U64(0x1EDB6DA56972C8E7) == 0xE7C87269A56DDB1E && BE2LE_U64(0x5D5F17C18FC6D69C) == 0x9CD6C68FC1175F5D;

    return test_result_u32 && test_result_u64;
}

#endif // !__UTILS__
